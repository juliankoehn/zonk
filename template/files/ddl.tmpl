// Code generated by zonk. DO NOT EDIT.

package {{ .Package }}

import (
	"database/sql"
	{{- if .Logger.Enabled }}
	"log"
	{{- end }}
)

var migrations = []struct {
	name string
	stmt string
}{
	{{- range .Migrations }}
	{{- range .Statements }}
	{
		name: {{ printf "%q" .Name }},
		stmt: {{ camelize .Name }},
	},
	{{- end }}
	{{- end }}
}

// Migrate performs the database migration. If the migration fails
// and error is returned.
func Migrate(db *sql.DB) error {
	if err := createTable(db); err != nil {
		return err
	}
	completed, err := selectCompleted(db)
	if err != nil && err != sql.ErrNoRows {
		return err
	}
	for _, migration := range migrations {
		if _, ok := completed[migration.name]; ok {
			{{ if .Logger.Enabled }}
			debug("migration skipped: %s", migration.name)
			{{ end }}
			continue
		}
		{{ if .Logger.Enabled }}
		info("migration started: %s", migration.name)
		{{ end }}
		if _, err := db.Exec(migration.stmt); err != nil {
			return err
		}
		if err := insertMigration(db, migration.name); err != nil {
			return err
		}
		{{ if .Logger.Enabled }}
		info("migration finished: %s", migration.name)
		{{ end }}
	}
	return nil
}

func createTable(db *sql.DB) error {
	_, err := db.Exec(migrationTableCreate)
	return err
}

func insertMigration(db *sql.DB, name string) error {
	_, err := db.Exec(migrationInsert, name)
	return err
}

func selectCompleted(db *sql.DB) (map[string]struct{}, error) {
	migrations := map[string]struct{}{}
	rows, err := db.Query(migrationSelect)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		migrations[name] = struct{}{}
	}
	return migrations, nil
}

{{ if .Logger.Enabled }}
//
// logging functions
//

func debug(message string, params ...interface{}) {
	log.Printf("migration: debug: "+message, params...)
}

func info(message string, params ...interface{}) {
	log.Printf("migration: info: "+message, params...)
}
{{ end }}

//
// migration table ddl and sql
//

var migrationTableCreate = `
CREATE TABLE IF NOT EXISTS migrations (
 name VARCHAR(255)
,UNIQUE(name)
)
`

var migrationInsert = `
INSERT INTO migrations (name) VALUES ({{ if eq .Dialect "postgres" -}} $1 {{- else -}} ? {{-  end }})
`

var migrationSelect = `
SELECT name FROM migrations
`

{{ range .Migrations }}
//
// {{ .Name }}
//
{{ range .Statements }}

var {{ camelize .Name }} = `
{{ .Value }}
`
{{ end }}
{{ end }}